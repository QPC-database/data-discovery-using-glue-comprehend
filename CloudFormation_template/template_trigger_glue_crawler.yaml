Resources:
  s3bucketFBFA637E:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: CdkBlogStack/s3bucket/Resource
  s3bucketNotifications7E3FF01B:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: s3bucketFBFA637E
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: .csv
                  - Name: prefix
                    Value: row_data/
            LambdaFunctionArn:
              Fn::GetAtt:
                - lambdafunction45C982D3
                - Arn
    DependsOn:
      - s3bucketAllowBucketNotificationsToCdkBlogStacklambdafunctionD0D7AA9A7B4FB0EC
    Metadata:
      aws:cdk:path: CdkBlogStack/s3bucket/Notifications/Resource
  s3bucketAllowBucketNotificationsToCdkBlogStacklambdafunctionD0D7AA9A7B4FB0EC:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lambdafunction45C982D3
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - s3bucketFBFA637E
          - Arn
    Metadata:
      aws:cdk:path: CdkBlogStack/s3bucket/AllowBucketNotificationsToCdkBlogStacklambdafunctionD0D7AA9A
  Role1ABCC5F0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - comprehend.amazonaws.com
                - glue.amazonaws.com
        Version: "2012-10-17"
      Description: allow lambda function to access s3 and Glue
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/ComprehendFullAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action: iam:PassRole
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: "0"
        - PolicyDocument:
            Statement:
              - Action:
                  - glue:*
                  - iam:ListRolePolicies
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: "1"
        - PolicyDocument:
            Statement:
              - Action: logs:*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: "2"
        - PolicyDocument:
            Statement:
              - Action: s3:*
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::GetAtt:
                          - s3bucketFBFA637E
                          - Arn
                      - /*
            Version: "2012-10-17"
          PolicyName: "3"
      RoleName: Lambda-S3-Glue-comprehend
    Metadata:
      aws:cdk:path: CdkBlogStack/Role/Resource
  lambdafunction45C982D3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import csv
          import boto3
          account_id = boto3.client("sts").get_caller_identity()["Account"]
          Glue_role_arn = 'arn:aws:iam::'+account_id+":role/Lambda-S3-Glue-comprehend" # replace with your IAM role created in step X
          client_glue = boto3.client('glue')
          iam = boto3.client('iam')
          s3 =boto3.client('s3')


          def main(event, context):
              bucket = event ['Records'][0]['s3']['bucket']['name']
              key = event ['Records'][0]['s3']['object']['key']
              #bucket ="gluecomprehendraafat-triger"
              #key ="row-data/"
              path = "s3://"+bucket+"/"+key
              key_list = key.split("/")
              key_prefix = key_list[0]

              key_list = key.split("/")
              table_name = key_list[1].split(".")[0]
              crawler_DB = table_name +"_DB"
              response_crawler_name_list = client_glue.list_crawlers(MaxResults=123)
              crawler_name_list = (response_crawler_name_list)['CrawlerNames']
              #check =  crawler_name in crawler_name_list
              check =  "glue_crawler_comprehend" in crawler_name_list
              if check is True:
                  response_delete_crawler = client_glue.delete_crawler(Name='glue_crawler_comprehend')


              ##########list DB and escape recreate DB if it's already created""#######
              response_db_list = client_glue.get_databases(CatalogId=account_id,ResourceShareType='ALL')
              DB_list = (response_db_list)['DatabaseList']
              db_name_list=[]
              db_index=0
              for db_name in DB_list:
                  db_name_list.append(DB_list[db_index]['Name'])
                  db_index += 1
              check_db =  crawler_DB.lower() in  db_name_list

              if check_db is False:
                  #creat DB for Glue
                  response_database = client_glue.create_database(
                  DatabaseInput={
                  'Name': crawler_DB,
                  'Description': 'glue_crawler_comprehend',
                  'LocationUri': 'string',
                  'Parameters': {'string': 'string'} })


              #creat Crawler
              table_prefix = table_name+"_"
              path_crawler = "s3://"+bucket+"/"+key_prefix
              response_crawler = client_glue.create_crawler(
              #Name=crawler_name,
              Name="glue_crawler_comprehend",
              Role=Glue_role_arn,
              DatabaseName=crawler_DB,
              Description='glue_crawler_comprehend',
              Targets={'S3Targets': [
                          {'Path': path_crawler},],} ,
                          TablePrefix=table_prefix,

                  )


              #run crawler
              #response = client_glue.start_crawler(Name=crawler_name)
              response = client_glue.start_crawler(Name= "glue_crawler_comprehend")
              #write the file name in text file to read it later in Glue job
              file_name = "file_name.txt"
              file_location = "file_location/" + file_name
              lambda_path = "/tmp/" + file_name
              s3_path = bucket+","+ key
              string = s3_path
              encoded_string = string.encode("utf-8")
              s3_resource = boto3.resource("s3")
              s3_resource.Bucket(bucket).put_object(Key=file_location, Body=encoded_string)

      Role:
        Fn::GetAtt:
          - Role1ABCC5F0
          - Arn
      FunctionName: trigger_data_cataloging
      Handler: index.main
      Runtime: python3.7
      Timeout: 240
    DependsOn:
      - Role1ABCC5F0
    Metadata:
      aws:cdk:path: CdkBlogStack/lambda_function/Resource
      aws:asset:path: asset.0fa60b4ef37b2bab1a637f0f23e1f49bb6689150f8807a48a3344163fa430432
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkBlogStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: CdkBlogStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // eslint-disable-next-line max-len
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error message as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: CdkBlogStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAEz1OSQ7CMAx8C3fXLL1wZJE4V+UFITVg2iRSnAhVUf5OEwSnGVuzbXG72eNmdVBvafQwrpN2njBdg9IjnJ2V4KMOcL7bnsRFrwmOIhQWwYPtA/7fRdEprwwF8uVYvAMHdjZDyU7SYjpFPVIN+7IMkzK3QWEqbvKGRRYHXKLVxVqUP56BlcHUu6l2VezcxHqu1ZVlkLZRZZ5gXZkzdHN4OrtucY+71UuYGx9tYEPYf/EDrQTdWQMBAAA=
    Metadata:
      aws:cdk:path: CdkBlogStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable

Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
